import cv2
#cascade_classifer = cv2.CascadeClassifer('haarcascades/haarcascade_frontalface_default.xml')
cascade_classifer = cv2.CascadeClassifer('haarcascades/haarcascade_eye.xml')
#cascade_classifer = cv2.CascadeClassifer('haarcascades/haarcascade_smile.xml')
cap = cv2.VideoCapture(0)#web cam capture

while True:
    #Capture frame-by-frame
    ret, frame = cap.read()
    # Our operations on the frame coome here
    gray = cv2.cvtColor(frame, 0)
    detections = cascade_classifer.detectMultiScale(gray,scaleFacetor=1.3,miniNeighbors=5)
    if(len(detections)>0):
        (x,y,w,h) = detections[0]
        frame = cv2.rectabgle(frame,(x,y),(x+w,y+h),(255,0,0),2)


        #Display the rectangle frame
        cv2.imshow('frame',frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        # When everything done, release the capture
        cap.release()
        cv2.destroyAllwindow()


#

import cv2


# load pre trained data

trained_face_data = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

#choose an image to detect face
"""
img = cv2.imread('NAR.png')
"""
webcam = cv2.VideoCapture(0)


while True:

    sucess_frame_read, frame = webcam.read()
    grayscaled_img = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

    face_coordinates=trained_face_data.detectMultiScale(grayscaled_img,scaleFactor=1.5,minNeighbors=5)
     

    for (x,y,w,h) in face_coordinates:
        cv2.rectangle(frame,(x,y),(x+w,y+h) , (0,255,0),10)
    cv2.imshow('unqcoder',frame)
    stop=cv2.waitKey(1)

    if stop==49:
        break


#make photo in gray scale
#grayscaled_img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
#decete faces
#face_coordinates=trained_face_data.detectMultiScale(grayscaled_img,scaleFactor=1.5,minNeighbors=5)
#rectangle around the face
#(x,y,w,h)=face_coordinates[0]

#for (x,y,w,h) in face_coordinates:
#cv2.rectangle(img,(x,y),(x+w,y+h) , (0,255,0),10)

#cv2.imshow('unqcoder',img)
 
#cv2.waitKey()